#!/usr/bin/env python3

from sys import argv, stdout
from math import pow, sqrt

class   BadArgumentError(Exception):
    def __init__(self, message, errors = "BadArgumentError"):
        super().__init__(message)
        self.errors = errors

class   Neutrinos():
    def __init__(self, value, arithmetic, harmonic, average):
        if value < 0 or arithmetic < 0 or harmonic < 0 or average < 0:
            raise BadArgumentError("only positive argument")
        self.value = value
        self.arithmetic = arithmetic
        self.harmonic = harmonic
        self.average = average
        self.root = 0
    def setValue(self):
        self.value += 1
    def getStandardDeviation(self, index):
        self.average = sqrt((((pow(self.average, 2) + pow(self.arithmetic, 2))
        * (self.value - 1) + pow(index, 2)) / self.value) - pow(((self.arithmetic
        * (self.value - 1)) + index) / self.value, 2))
    def getArithmeticMean(self, index):
        self.arithmetic = ((self.arithmetic * (self.value - 1)) + index) / self.value
    def getRootMean(self, index):
        self.root = sqrt((((pow(self.average, 2) + pow(self.arithmetic, 2))
        * (self.value - 1)) + pow(index, 2)) / self.value)
    def getHarmonicMean(self, index):
        self.harmonic = self.value / (((1 / self.harmonic) * (self.value - 1)) + (1 / index))
    def printValue(self):
        print("    Number of values:   %.0f" % self.value)
        print("    Standard deviation: %.2f" % self.average)
        print("    Arithmetic mean:    %.2f" % self.arithmetic)
        print("    Root mean square:   %.2f" % self.root)
        print("    Harmonic mean:      %.2f\n" % self.harmonic)

def     manHelp():
    print("USAGE\n    ./206neutrinos n a h sd\n\nDESCRIPTION\n    n      number of values")
    print("    a      arithmetic mean\n    h      harmonic mean\n    sd     standard deviation")

def loop(obj):
    while (True):
        string = input("Enter next value: ")
        if string == "END":
            exit(0)
        index = int(string)
        obj.setValue()
        obj.getRootMean(index)
        obj.getStandardDeviation(index)
        obj.getArithmeticMean(index)
        obj.getHarmonicMean(index)
        obj.printValue()

def     main():
    try:
        if len(argv) == 2:
            if argv[1] == "-h":
                manHelp()
            else:
                raise BadArgumentError("Usage '-h'")
        elif len(argv) == 5:
            obj = Neutrinos(int(argv[1]), int(argv[2]),
                            int(argv[3]), int(argv[4]))
            loop(obj)
        else:
            raise BadArgumentError("Usage '-h'")
    except SystemExit:
        exit(0)
    except BaseException as error:
        stdout.write(str(type(error).__name__) + ": {}\n".format(error))
        exit(84)

if __name__ == "__main__":
    main()
