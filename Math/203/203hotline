#!/usr/bin/env python3

import sys
from math import factorial, exp
from time import time

def print_usage(i):

    print("""USAGE
    ./203hotline [n k | d]

DESCRIPTION
    n      n value for the computation of C(n k)
    k      k value for the computation of C(n k)
    d      average duration of calls (in seconds)""")

    return (i)


def calculateCoef(n, k):

	return (factorial(n) // (factorial(k) * factorial(n - k)))


def getTime():

	return (time() * 1000)


def Binomial(time, people):

	print("Binomial distribution:")
	over = 0
	start = getTime()
	for i in range(0, 51):
		coef = calculateCoef(people, i) * (time**i) * (1 - time)**(people - i)
		print("{} -> {:.3f}".format(i, coef), end='\n' if i != 0 and (i + 1) % 5 == 0 or i == 50 else '\t')
		over = over + coef if i > 25 else over

	print("Overload: {:.1f}%".format(over * 100))
	print("Computation time: {:.2f} ms".format(getTime() - start))



def Poisson(time, people):

	print("\nPoisson distribution:")
	over = 0
	start = getTime()
	for i in range(0, 51):
		coef = (exp(-(people * time)) * ((people * time)**i) / factorial(i))
		print("{} -> {:.3f}".format(i, coef), end='\n' if i != 0 and (i + 1) % 5 == 0 or i == 50 else '\t')
		over = over + coef if i > 25 else over

	print("Overload: {:.1f}%".format(over * 100))
	print("Computation time: {:.2f} ms".format(getTime() - start))


def fonction_one(arg):

	try:
		time = int(arg) / (3600 * 8)
	except ValueError:
		print("Error: {}: Bad argument".format(arg), file=sys.stderr)
		return (84)
	Binomial(time, 3500)
	Poisson(time, 3500)


def fonction_tow(arg1, arg2):

	try:
		n = int(arg1)
		try:
			k = int(arg2)
		except ValueError:
			print("Error: {}: Bad argument".format(arg2), file=sys.stderr)
			return (84)
	except ValueError:
		print("Error: {}: Bad argument".format(arg1), file=sys.stderr)
		return (84)

	print("{}-combinations of a set of size {}:\n{}".format(k, n, calculateCoef(n, k)))


def main(argv):

	if "-h" in argv:
		return (print_usage(0))
	elif len(argv) == 1:
		return (fonction_one(argv[0]))
	elif len(argv) == 2:
		return (fonction_tow(argv[0], argv[1]))
	else:
		return (84)


if __name__ == "__main__":
	exit(main(sys.argv[1:]))
